name: CI/CD bruhhhhhh

on:
  push:
    branches:
      - master  
  workflow_dispatch:

jobs:
  build:
    runs-on: [self-hosted, windows]

    steps:
      - name: Setup SSH Key
        run: |
          $sshDir = "$env:USERPROFILE\.ssh"
          if (-not (Test-Path $sshDir)) { New-Item -ItemType Directory -Force -Path $sshDir }
          
          # Lưu SSH private key
          "${{ secrets.SSH_PRIVATE_KEY }}" | Out-File -Encoding ascii "$sshDir\id_rsa"
          icacls "$sshDir\id_rsa" /inheritance:r /grant:r "$($env:USERNAME):F"
          
          # Thêm GitHub vào known_hosts
          ssh-keyscan -p 443 github.com 2>$null | Out-File -Encoding utf8 "$sshDir\known_hosts" -Append
          
          # Khởi động SSH agent và thêm key
          Start-Service ssh-agent
          ssh-add "$sshDir\id_rsa"

          # Đổi URL Git remote sang SSH
          git remote set-url origin git@github.com:nrjftd/idkwhyamidothis.git
        shell: pwsh

      - name: Add GitHub to known_hosts
        run: |
          $sshDir = "$env:USERPROFILE\.ssh"
          if (-not (Test-Path $sshDir)) { 
            New-Item -ItemType Directory -Force -Path $sshDir 
          }

          $knownHostsPath = "$sshDir\known_hosts"
          if (Test-Path $knownHostsPath) {
            # Xóa dòng chứa github.com trước khi thêm mới
            (Get-Content $knownHostsPath) | Where-Object {$_ -notmatch "github.com"} | Set-Content $knownHostsPath
          }

          # Thêm host key mới (tự động chấp nhận fingerprint)
          ssh-keyscan -p 443 ssh.github.com 2>$null | Out-File -Encoding utf8 $knownHostsPath -Append

          # Kiểm tra kết nối SSH để tự động xác nhận fingerprint nếu cần
          ssh -o StrictHostKeyChecking=accept-new -T -p 443 git@ssh.github.com
          if ($LASTEXITCODE -eq 1) { Write-Host "Ignoring exit code 1"; exit 0 }
        shell: pwsh


      - name: Debug SSH Connection
        run: | 
          ssh -T -p 443 git@ssh.github.com
          if ($LASTEXITCODE -ne 0) { Write-Host "Ignoring error"; exit 0 }
        shell: pwsh

      - name: Configure SSH for GitHub
        run: |
          $sshConfigPath = "$env:USERPROFILE\.ssh\config"
          Set-Content -Path $sshConfigPath -Value @"
          Host github.com
            Hostname ssh.github.com
            Port 443
            User git
          "@
          ssh-keyscan -p 443 ssh.github.com | Out-File -Encoding utf8 "$env:USERPROFILE\.ssh\known_hosts" -Append
        shell: pwsh

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Golang
        uses: actions/setup-go@v4
        with:
          go-version: 1.23

      - name: Install dependencies
        run: go mod tidy
        shell: pwsh 

      - name: Test PostgreSQL connection
        run: |
          echo "Testing PostgreSQL connection..."
          $env:PGPASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
          pg_isready -h localhost -p ${{ secrets.POSTGRES_PORT }} -U ${{ secrets.POSTGRES_USER }}
        shell: pwsh
        
      - name: Build Go Application
        run: go build -o myapp.exe ./main.go
        shell: pwsh

      - name: Clean up
        run: |
          echo "Cleaning up..."
          if (Test-Path myapp.exe) { Remove-Item -Force myapp.exe }
        shell: pwsh

  docker:
    needs: build
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        shell: pwsh

      - name: Build & Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/myapp:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:latest
        shell: pwsh

  deploy:
    needs: docker
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          @"
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          APP_HTTP_PORT=${{ secrets.APP_HTTP_PORT }}
          APP_GRPC_PORT=${{ secrets.APP_GRPC_PORT }}
          "@ | Out-File -Encoding utf8 .env
        shell: pwsh

      - name: Stop existing container
        run: |
          echo "Stopping existing containers..."
          if ((docker ps -q) -ne $null) {
            docker-compose down
          } else {
            echo "No running containers to stop."
          }
        shell: pwsh

      - name: Deploy with Docker Compose
        run: docker-compose up -d --build
        shell: pwsh
