name: CI/CD bruhhhhhh

on:
  push:
    branches:
      - master  
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Golang
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Install dependencies
        run: go mod tidy

      - name: Run Tests (skip)
        if: false
        run: go test ./...

      - name: Build Go Application (skip .pb.validate.go)
        run: |
          go build -o myapp ./main.go
  docker:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/myapp:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:latest

  deploy:
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Create SSH Key File
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key.pem
          chmod 600 ssh_key.pem
          ls -la ssh_key.pem
      ########
      - name: Check SSH Key File Type
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ssh_key.pem
          chmod 600 ssh_key.pem
          file ssh_key.pem
      ########
    #  - name: Decode SSH Key
    #    run: |
    #      echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 --decode > ssh_key.pem
    #      chmod 600 ssh_key.pem
      - name: Debug SSH Key
        run: |
          echo "Checking if SSH_PRIVATE_KEY exists..."
          if [[ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]]; then
            echo "❌ SSH_PRIVATE_KEY is empty or not set!"
            exit 1
          else
            echo "✅ SSH_PRIVATE_KEY is set."
            echo "${{ secrets.SSH_PRIVATE_KEY }}" | wc -l
          fi
      - name: Debug SSH Connection
        run: |
          ssh -vvv -o StrictHostKeyChecking=no -i <(echo "${{ secrets.SSH_PRIVATE_KEY }}") ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "echo 'SSH connection successful'"

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Disabling StrictHostKeyChecking"
            mkdir -p ~/.ssh
            echo "StrictHostKeyChecking no" >> ~/.ssh/config
            echo "UserKnownHostsFile=/dev/null" >> ~/.ssh/config
            
            echo "Pulling latest Docker image"
            docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:latest
            
            echo "Stopping old container"
            docker stop myapp || true
            docker rm myapp || true
            
            echo "Running new container"
            docker run -d --name myapp -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/myapp:latest
